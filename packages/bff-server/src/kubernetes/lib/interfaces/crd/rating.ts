/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Rating {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  spec?: {
    /**
     * ComponentName Each Rating corresponds to a component
     */
    componentName: string;
    /**
     * Evaluator defines the configuration when evaluating the component
     */
    evaluator: {
      /**
       * LLM defines the LLM to be used when evaluating the component
       */
      llm?: {
        /**
         * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
         */
        apiGroup?: string;
        /**
         * Kind is the type of resource being referenced
         */
        kind: string;
        /**
         * Name is the name of resource being referenced
         */
        name: string;
        /**
         * Namespace is the namespace of resource being referenced
         */
        namespace?: string;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * PipelineParams List of parameters defined in the pipeline If mulitple PipelineParams contains same dimension,only the 1st one shall be used
     */
    pipelineParams: {
      /**
       * Dimension of this pipelinerun
       */
      dimension: string;
      /**
       * Params List of parameters defined in the pipeline
       */
      params?: {
        name: string;
        /**
         * ParamValue is a type that can hold a single string or string array. Used in JSON unmarshalling so that a single JSON field can accept either an individual string or an array of strings.
         */
        value: {
          arrayVal?: string[];
          objectVal?: {
            [k: string]: string;
          };
          stringVal?: string;
          /**
           * ParamType indicates the type of an input parameter; Used to distinguish between a single string and an array of strings.
           */
          type: 'string' | 'array' | 'object';
          [k: string]: any;
        };
        [k: string]: any;
      }[];
      /**
       * PipelineName the name of pipeline
       */
      pipelineName: string;
      [k: string]: any;
    }[];
    [k: string]: any;
  };
  status?: {
    /**
     * Conditions of the resource.
     */
    conditions?: {
      /**
       * LastSuccessfulTime is repository Last Successful Update Time
       */
      lastSuccessfulTime?: string;
      /**
       * LastTransitionTime is the last time this condition transitioned from one status to another.
       */
      lastTransitionTime: string;
      /**
       * A Message containing details about this condition's last transition from one status to another, if any.
       */
      message?: string;
      /**
       * A Reason for this condition's last transition from one status to another.
       */
      reason: string;
      /**
       * Status of this condition; is it currently True, False, or Unknown
       */
      status: string;
      /**
       * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
       */
      type: string;
      [k: string]: any;
    }[];
    /**
     * Evaluations contains the evaluator status with the `Dimension` as the key
     */
    evaluations?: {
      [k: string]: {
        /**
         * Conditions of the resource.
         */
        conditions?: {
          /**
           * LastSuccessfulTime is repository Last Successful Update Time
           */
          lastSuccessfulTime?: string;
          /**
           * LastTransitionTime is the last time this condition transitioned from one status to another.
           */
          lastTransitionTime: string;
          /**
           * A Message containing details about this condition's last transition from one status to another, if any.
           */
          message?: string;
          /**
           * A Reason for this condition's last transition from one status to another.
           */
          reason: string;
          /**
           * Status of this condition; is it currently True, False, or Unknown
           */
          status: string;
          /**
           * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
           */
          type: string;
          [k: string]: any;
        }[];
        /**
         * FinalRating from this evaluation TODO: add the final rating
         */
        finalRating?: string;
        prompt?: string;
        [k: string]: any;
      };
    };
    /**
     * PipelineRuns contains the pipelinerun status with the `Dimension` as the key
     */
    pipelineRuns?: {
      [k: string]: {
        /**
         * Conditions of the resource.
         */
        conditions?: {
          /**
           * LastSuccessfulTime is repository Last Successful Update Time
           */
          lastSuccessfulTime?: string;
          /**
           * LastTransitionTime is the last time this condition transitioned from one status to another.
           */
          lastTransitionTime: string;
          /**
           * A Message containing details about this condition's last transition from one status to another, if any.
           */
          message?: string;
          /**
           * A Reason for this condition's last transition from one status to another.
           */
          reason: string;
          /**
           * Status of this condition; is it currently True, False, or Unknown
           */
          status: string;
          /**
           * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
           */
          type: string;
          [k: string]: any;
        }[];
        pipelineName: string;
        pipelinerunName: string;
        tasks?: {
          /**
           * Conditions of the resource.
           */
          conditions?: {
            /**
             * LastSuccessfulTime is repository Last Successful Update Time
             */
            lastSuccessfulTime?: string;
            /**
             * LastTransitionTime is the last time this condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * A Message containing details about this condition's last transition from one status to another, if any.
             */
            message?: string;
            /**
             * A Reason for this condition's last transition from one status to another.
             */
            reason: string;
            /**
             * Status of this condition; is it currently True, False, or Unknown
             */
            status: string;
            /**
             * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
             */
            type: string;
            [k: string]: any;
          }[];
          description: string;
          name: string;
          taskRunName?: string;
          type?: string;
          [k: string]: any;
        }[];
        [k: string]: any;
      };
    };
    [k: string]: any;
  };
  [k: string]: any;
}
