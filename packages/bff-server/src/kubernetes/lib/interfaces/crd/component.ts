/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Component is the Schema for the components API In general, Component will be automatically generated by the controller without user creation to display the content of the component in the Repository, Spec should add the necessary configuration if possible (currently left blank), and Status should display as much information about this component as possible. Displaying information in Status ensures that it cannot be unintentionally modified by users. Used to management components - kubebb-system: public - user-namespace: private
 */
export interface Component {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * ComponentSpec defines the desired state of Component
   */
  spec?: {
    creator?: string;
    [k: string]: any;
  };
  /**
   * ComponentStatus defines the observed state of Component
   */
  status?: {
    /**
     * The current component is not in the return list of URLs and will not be deleted but marked as deprecated by this field.
     */
    deprecated?: boolean;
    /**
     * FIXME: some fields(like description) may change when version update, how to deal with it? A one-sentence description of the chart
     */
    description?: string;
    /**
     * DisplayName of the component that comes from the helm chart's latest annotation
     */
    displayName?: string;
    /**
     * The URL to a relevant project page, git repo, or contact person
     */
    home?: string;
    /**
     * The URL to an icon file.
     */
    icon?: string;
    /**
     * A list of string keywords
     */
    keywords?: string[];
    /**
     * Maintainers is a list of maintainers
     */
    maintainers?: {
      /**
       * Email is an optional email address to contact the named maintainer
       */
      email?: string;
      /**
       * Name is a user name or organization name
       */
      name?: string;
      /**
       * URL is an optional URL to an address for the named maintainer
       */
      url?: string;
      [k: string]: any;
    }[];
    /**
     * The name of the component may come from helm chart name
     */
    name: string;
    /**
     * RepositoryRef is a reference to the Repository
     */
    repository: {
      /**
       * API version of the referent.
       */
      apiVersion?: string;
      /**
       * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
       */
      fieldPath?: string;
      /**
       * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      kind?: string;
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
       */
      name?: string;
      /**
       * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
       */
      namespace?: string;
      /**
       * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
       */
      resourceVersion?: string;
      /**
       * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
       */
      uid?: string;
      [k: string]: any;
    };
    /**
     * Source is the URL to the source code of this Component
     */
    sources?: string[];
    /**
     * versions contains all version of one component.
     */
    versions: {
      annotations?: {
        [k: string]: string;
      };
      appVersion: string;
      createdAt: string;
      deprecated: boolean;
      digest: string;
      updatedAt: string;
      urls?: string[];
      version: string;
      [k: string]: any;
    }[];
    [k: string]: any;
  };
  [k: string]: any;
}
