/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * LLM is the Schema for the llms API
 */
export interface LLM {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * LLMSpec defines the desired state of LLM
   */
  spec?: {
    /**
     * Creator defines datasource creator (AUTO-FILLED by webhook)
     */
    creator?: string;
    /**
     * Description defines datasource description
     */
    description?: string;
    /**
     * DisplayName defines datasource display name
     */
    displayName?: string;
    /**
     * Models provided by this LLM If not set,we will use default model list based on LLMType
     */
    models?: string[];
    /**
     * Provider defines the provider info which provide this llm service
     */
    provider?: {
      /**
       * Endpoint defines connection info
       */
      endpoint?: {
        /**
         * AuthSecret if the chart repository requires auth authentication, set the username and password to secret, with the field user and password respectively.
         */
        authSecret?: {
          /**
           * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
           */
          apiGroup?: string;
          /**
           * Kind is the type of resource being referenced
           */
          kind: string;
          /**
           * Name is the name of resource being referenced
           */
          name: string;
          /**
           * Namespace is the namespace of resource being referenced
           */
          namespace?: string;
          [k: string]: any;
        };
        /**
         * Insecure if the endpoint needs a secure connection
         */
        insecure?: boolean;
        /**
         * InternalURL for this endpoint which is much faster but only can be used inside this cluster
         */
        internalURL?: string;
        /**
         * URL for this endpoint
         */
        url?: string;
        [k: string]: any;
      };
      /**
       * Worker defines the worker info Means this LLM is provided by a arcadia worker
       */
      worker?: {
        /**
         * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
         */
        apiGroup?: string;
        /**
         * Kind is the type of resource being referenced
         */
        kind: string;
        /**
         * Name is the name of resource being referenced
         */
        name: string;
        /**
         * Namespace is the namespace of resource being referenced
         */
        namespace?: string;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Type defines the type of llm
     */
    type: string;
    [k: string]: any;
  };
  /**
   * LLMStatus defines the observed state of LLM
   */
  status?: {
    /**
     * Conditions of the resource.
     */
    conditions?: {
      /**
       * LastSuccessfulTime is repository Last Successful Update Time
       */
      lastSuccessfulTime?: string;
      /**
       * LastTransitionTime is the last time this condition transitioned from one status to another.
       */
      lastTransitionTime: string;
      /**
       * A Message containing details about this condition's last transition from one status to another, if any.
       */
      message?: string;
      /**
       * A Reason for this condition's last transition from one status to another.
       */
      reason: string;
      /**
       * Status of this condition; is it currently True, False, or Unknown
       */
      status: string;
      /**
       * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
       */
      type: string;
      [k: string]: any;
    }[];
    [k: string]: any;
  };
  [k: string]: any;
}
